{"ast":null,"code":"var _jsxFileName = \"C:\\\\Program Files\\\\Git\\\\reacts\\\\code-challenge\\\\mylivn\\\\rss-feed\\\\src\\\\components\\\\HomePage\\\\index.js\";\nimport React, { useState } from 'react';\nimport useRSSFeed from '../../hooks/useRSSFeed';\nimport Search from \"../Search\";\nimport RSSFeedTile from '../RSSFeedTile';\nimport '../../common/util/Extensions';\nexport default function HomePage() {\n  const {\n    rssFeedList,\n    currentPage,\n    setCurrentPage\n  } = useRSSFeed(); //const [currentPage, setCurrentPage] = useState(1);\n  // const mylist = rssFeedList.myMap((item) => {\n  //     return item.title\n  // });\n  // console.log(mylist);\n  // const mylist1 = rssFeedList.myFilter((item) => {\n  //     return item.title === \"Magnedude\"\n  // });\n  // console.log(mylist1);\n  // const total = rssFeedList.myReduce((currentTotal, item) => {\n  //     return item.price + currentTotal\n  // }, 0);\n  // console.log(total);\n\n  const renderList = () => {\n    let articles = [];\n    let pgNo = 0;\n    let count = rssFeedList.length;\n    /* I am using my own version of Array.prototype.map */\n\n    articles = rssFeedList.myMap((item, i) => {\n      pgNo = pgNo + 1;\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        key: count + pgNo,\n        className: isLinkActive(pgNo) ? pgNo === currentPage ? \"navigation selected\" : \"navigation\" : \"navigation disabled\",\n        onClick: e => handlePaginationClick(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }\n      }, pgNo), /*#__PURE__*/React.createElement(RSSFeedTile, {\n        key: pgNo,\n        article: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }\n      }));\n    });\n\n    if (count > 1) {\n      articles.unshift( /*#__PURE__*/React.createElement(\"a\", {\n        key: 0,\n        className: currentPage > 1 ? \"navigation\" : \"navigation disabled\",\n        onClick: e => {\n          setCurrentPage(currentPage - 1);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }\n      }, \"<\"));\n      articles.push( /*#__PURE__*/React.createElement(\"a\", {\n        key: count + count + 1,\n        className: currentPage < rssFeedList.length ? \"navigation\" : \"navigation disabled\",\n        onClick: e => {\n          setCurrentPage(currentPage + 1);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, \">\"));\n    }\n\n    return articles;\n  };\n\n  const handlePaginationClick = eve => {\n    try {\n      setCurrentPage(parseInt(eve.target.innerText));\n    } catch (err) {}\n  };\n\n  const isLinkActive = pgNo => {\n    let isActive = true;\n\n    if (rssFeedList.length > 10) {\n      if (pgNo !== currentPage) {\n        let minPage = 0;\n        let maxPage = 0;\n        let itemsCount = rssFeedList.length;\n\n        if (currentPage - 4 <= 1) {\n          minPage = 1;\n          maxPage = 10;\n        } else if (currentPage + 5 > itemsCount) {\n          minPage = itemsCount - 9;\n          maxPage = itemsCount;\n        } else {\n          minPage = currentPage - 4;\n          maxPage = currentPage + 5;\n        }\n\n        if (pgNo < minPage || pgNo > maxPage) isActive = false;\n      }\n    }\n\n    return isActive;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"article-slider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, renderList())));\n}","map":{"version":3,"sources":["C:/Program Files/Git/reacts/code-challenge/mylivn/rss-feed/src/components/HomePage/index.js"],"names":["React","useState","useRSSFeed","Search","RSSFeedTile","HomePage","rssFeedList","currentPage","setCurrentPage","renderList","articles","pgNo","count","length","myMap","item","i","isLinkActive","e","handlePaginationClick","unshift","push","eve","parseInt","target","innerText","err","isActive","minPage","maxPage","itemsCount"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport useRSSFeed from '../../hooks/useRSSFeed';\r\nimport Search from \"../Search\";\r\nimport RSSFeedTile from '../RSSFeedTile';\r\nimport '../../common/util/Extensions';\r\n\r\nexport default function HomePage() {\r\n    const { rssFeedList, currentPage, setCurrentPage } = useRSSFeed();\r\n    //const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    // const mylist = rssFeedList.myMap((item) => {\r\n    //     return item.title\r\n    // });\r\n    // console.log(mylist);\r\n    // const mylist1 = rssFeedList.myFilter((item) => {\r\n    //     return item.title === \"Magnedude\"\r\n    // });\r\n    // console.log(mylist1);\r\n    // const total = rssFeedList.myReduce((currentTotal, item) => {\r\n    //     return item.price + currentTotal\r\n    // }, 0);\r\n    // console.log(total);\r\n\r\n    const renderList = () => {\r\n        let articles = [];\r\n        let pgNo = 0;\r\n        let count = rssFeedList.length;\r\n\r\n        /* I am using my own version of Array.prototype.map */\r\n        articles = rssFeedList.myMap((item, i) => {\r\n            pgNo = pgNo + 1;\r\n            return (\r\n                <React.Fragment>\r\n                    <a key={(count + pgNo)}\r\n                        className={isLinkActive(pgNo) ? pgNo === currentPage ? \"navigation selected\" : \"navigation\" : \"navigation disabled\"}\r\n                        onClick={(e) => handlePaginationClick(e)}>{pgNo}</a>\r\n                    <RSSFeedTile key={pgNo} article={item} />\r\n                </React.Fragment>\r\n            );\r\n        });\r\n\r\n        if (count > 1) {\r\n            articles.unshift(\r\n                <a key={0} className={currentPage > 1 ? \"navigation\" : \"navigation disabled\"}\r\n                    onClick={(e) => { setCurrentPage(currentPage - 1); }}>{\"<\"}</a>);\r\n            articles.push(\r\n                <a key={(count + count + 1)} className={currentPage < rssFeedList.length ? \"navigation\" : \"navigation disabled\"}\r\n                    onClick={(e) => { setCurrentPage(currentPage + 1); }}>{\">\"}</a>);\r\n        }\r\n        return articles;\r\n    };\r\n    const handlePaginationClick = (eve) => {\r\n        try { setCurrentPage(parseInt(eve.target.innerText)); } catch (err) { }\r\n    };\r\n\r\n    const isLinkActive = (pgNo) => {\r\n        let isActive = true;\r\n        if (rssFeedList.length > 10) {\r\n            if (pgNo !== currentPage) {\r\n                let minPage = 0; let maxPage = 0;\r\n                let itemsCount = rssFeedList.length;\r\n                if (currentPage - 4 <= 1) { minPage = 1; maxPage = 10; }\r\n                else if (currentPage + 5 > itemsCount) { minPage = itemsCount - 9; maxPage = itemsCount; }\r\n                else { minPage = currentPage - 4; maxPage = currentPage + 5; }\r\n                if (pgNo < minPage || pgNo > maxPage) isActive = false;\r\n            }\r\n        }\r\n        return isActive;\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <Search />\r\n            <div className=\"container\">\r\n                <div className=\"article-slider\">\r\n                    {renderList()}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}