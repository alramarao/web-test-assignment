{"ast":null,"code":"var _jsxFileName = \"C:\\\\Program Files\\\\Git\\\\reacts\\\\code-challenge\\\\mylivn\\\\rss-feed\\\\src\\\\providers\\\\RSSFeedProvider\\\\index.js\";\nimport React, { useState, useCallback } from \"react\";\nexport const RSSFeedContext = React.createContext({\n  error: null,\n  currentPage: 1,\n  rssFeedList: [],\n  addError: () => {},\n  removeError: () => {},\n  updateRSSFeed: () => {},\n  resetCurrentPage: () => {}\n});\nexport default function RSSFeedProvider({\n  children\n}) {\n  const [error, setError] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [rssFeedList, setRSSFeedList] = useState([]);\n\n  const removeError = () => setError(null);\n\n  const updateRSSFeed = newsfeed => setRSSFeedList(newsfeed);\n\n  const addError = (message, status) => setError({\n    message,\n    status\n  });\n\n  const contextValue = {\n    error,\n    currentPage,\n    rssFeedList,\n    addError: useCallback((message, status) => addError(message, status), []),\n    removeError: useCallback(() => removeError(), []),\n    updateRSSFeed: useCallback(newsfeed => updateRSSFeed(newsfeed), []),\n    resetCurrentPage: useCallback(() => setCurrentPage(1), [])\n  };\n  return /*#__PURE__*/React.createElement(RSSFeedContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, children);\n}","map":{"version":3,"sources":["C:/Program Files/Git/reacts/code-challenge/mylivn/rss-feed/src/providers/RSSFeedProvider/index.js"],"names":["React","useState","useCallback","RSSFeedContext","createContext","error","currentPage","rssFeedList","addError","removeError","updateRSSFeed","resetCurrentPage","RSSFeedProvider","children","setError","setCurrentPage","setRSSFeedList","newsfeed","message","status","contextValue"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AAEA,OAAO,MAAMC,cAAc,GAAGH,KAAK,CAACI,aAAN,CAAoB;AAC9CC,EAAAA,KAAK,EAAE,IADuC;AAE9CC,EAAAA,WAAW,EAAE,CAFiC;AAG9CC,EAAAA,WAAW,EAAE,EAHiC;AAI9CC,EAAAA,QAAQ,EAAE,MAAM,CAAG,CAJ2B;AAK9CC,EAAAA,WAAW,EAAE,MAAM,CAAG,CALwB;AAM9CC,EAAAA,aAAa,EAAE,MAAM,CAAG,CANsB;AAO9CC,EAAAA,gBAAgB,EAAE,MAAM,CAAG;AAPmB,CAApB,CAAvB;AAUP,eAAe,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAuC;AAClD,QAAM,CAACR,KAAD,EAAQS,QAAR,IAAoBb,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACK,WAAD,EAAcS,cAAd,IAAgCd,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACM,WAAD,EAAcS,cAAd,IAAgCf,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMQ,WAAW,GAAG,MAAMK,QAAQ,CAAC,IAAD,CAAlC;;AACA,QAAMJ,aAAa,GAAIO,QAAD,IAAcD,cAAc,CAACC,QAAD,CAAlD;;AACA,QAAMT,QAAQ,GAAG,CAACU,OAAD,EAAUC,MAAV,KAAqBL,QAAQ,CAAC;AAAEI,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,CAA9C;;AAEA,QAAMC,YAAY,GAAG;AACjBf,IAAAA,KADiB;AAEjBC,IAAAA,WAFiB;AAGjBC,IAAAA,WAHiB;AAIjBC,IAAAA,QAAQ,EAAEN,WAAW,CAAC,CAACgB,OAAD,EAAUC,MAAV,KAAqBX,QAAQ,CAACU,OAAD,EAAUC,MAAV,CAA9B,EAAiD,EAAjD,CAJJ;AAKjBV,IAAAA,WAAW,EAAEP,WAAW,CAAC,MAAMO,WAAW,EAAlB,EAAsB,EAAtB,CALP;AAMjBC,IAAAA,aAAa,EAAER,WAAW,CAAEe,QAAD,IAAcP,aAAa,CAACO,QAAD,CAA5B,EAAwC,EAAxC,CANT;AAOjBN,IAAAA,gBAAgB,EAAET,WAAW,CAAC,MAAMa,cAAc,CAAC,CAAD,CAArB,EAA0B,EAA1B;AAPZ,GAArB;AAUA,sBACI,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEK,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,QADL,CADJ;AAKH","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\n\r\nexport const RSSFeedContext = React.createContext({\r\n    error: null,\r\n    currentPage: 1,\r\n    rssFeedList: [],\r\n    addError: () => { },\r\n    removeError: () => { },\r\n    updateRSSFeed: () => { },\r\n    resetCurrentPage: () => { }\r\n});\r\n\r\nexport default function RSSFeedProvider({ children }) {\r\n    const [error, setError] = useState(null);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [rssFeedList, setRSSFeedList] = useState([]);\r\n\r\n    const removeError = () => setError(null);\r\n    const updateRSSFeed = (newsfeed) => setRSSFeedList(newsfeed);\r\n    const addError = (message, status) => setError({ message, status });\r\n\r\n    const contextValue = {\r\n        error,\r\n        currentPage,\r\n        rssFeedList,\r\n        addError: useCallback((message, status) => addError(message, status), []),\r\n        removeError: useCallback(() => removeError(), []),\r\n        updateRSSFeed: useCallback((newsfeed) => updateRSSFeed(newsfeed), []),\r\n        resetCurrentPage: useCallback(() => setCurrentPage(1), []),\r\n    };\r\n\r\n    return (\r\n        <RSSFeedContext.Provider value={contextValue}>\r\n            {children}\r\n        </RSSFeedContext.Provider>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}